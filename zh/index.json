[{"content":"并行与并发 并行，是多核CPU上的多任务处理，是同一时间同时执行 并发，是单核CPU上的多任务处理，是同一个时间段内交替执行，其实是通过时间片轮转实现 进程、线程、协程 这是三种并发执行单元：\n进程：操作系统资源分配的单位。一个程序就是一个进程 线程：CPU调度的单位，运行在进程内部，共享进程的资源 协程：用户态的轻量级线程，由程序控制切换，本质是函数级别的上下文切换。协程的切换操作系统无法感知，节省了从用户态到内核态的切换开销。 内核态和用户态 根据进程访问资源的特点，把进程在系统上的运行分为两个级别：\n用户态：用户态的进程只能访问自己分配的虚拟内存数据和受限的系统资源 内核态：内核态的进程可以访问所有硬件资源 两种状态的切换有三种方式：\n系统调用：用户态进程主动切换。比如文件操作、网络IO、线程管理。 中断：外围设备完成操作后，会向CPU发送中断信号，CPU会暂停用户态程序执行，进入内核态处理。比如磁盘IO完成、时钟中断（系统定时器，用于线程抢占）、网络包到达。 异常：程序执行中出现异常（非法操作或特权指令）时，CPU 自动切换到内核态处理。比如非法内存访问、除零异常。 线程上下文切换 线程的切换实际是说的内核态线程的切换。上下文的内容包括：CPU寄存器，内核栈指针等；如果是不同进程的线程还需要切换虚拟内存这些信息。\n线程安全是什么 线程安全其实可以理解为多个线程在操作共享数据的时候，对于数据的处理逻辑是正确的。\n可以从三个要素来保证线程安全：\n原子性：对于数据的操作，要么全部执行，要么不不执行，不会出现中间状态。这个通过加锁、原子操作实现。 可见性：一个线程修改了共享变量之后，其他线程要能立即看到变化。这个通过加锁和volatile关键字可以实现。 有序性：程序的执行顺序与代码编写顺序保持一致，不会被 CPU 或编译器重排序打乱。通过加锁和volatile关键字可以实现。 ","permalink":"https://Xloading-919.github.io/zh/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/","summary":"\u003ch2 id=\"并行与并发\"\u003e并行与并发\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e并行，是多核CPU上的多任务处理，是同一时间同时执行\u003c/li\u003e\n\u003cli\u003e并发，是单核CPU上的多任务处理，是同一个时间段内交替执行，其实是通过时间片轮转实现\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"进程线程协程\"\u003e进程、线程、协程\u003c/h2\u003e\n\u003cp\u003e这是三种并发执行单元：\u003c/p\u003e","title":"多线程基础"},{"content":"zheshiIO\n","permalink":"https://Xloading-919.github.io/zh/io/","summary":"\u003cp\u003ezheshiIO\u003c/p\u003e","title":"IO"},{"content":" 介绍AQS\n1 2 3 public static void main(String[] args) { } 的地方的 地方领导看见两个离开酒店联发科角度来看锻炼腹肌看到离开家离开家发来的空间\n的地方 ddfkj dd 对付的 ","permalink":"https://Xloading-919.github.io/zh/aqs%E6%BC%AB%E8%B0%88/","summary":"锁实现","title":"AQS漫谈"},{"content":" 这里尝试写一个博客\n","permalink":"https://Xloading-919.github.io/zh/about/","summary":"\u003c!-- more --\u003e\n\u003cp\u003e这里尝试写一个博客\u003c/p\u003e","title":"关于"}]