<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Xloading&#39;s Blog</title>
    <link>https://Xloading-919.github.io/zh/</link>
    <description>Recent content on Xloading&#39;s Blog</description>
    <generator>Hugo -- 0.152.2</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 15 Oct 2025 16:43:17 +0800</lastBuildDate>
    <atom:link href="https://Xloading-919.github.io/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Systemctl命令简记</title>
      <link>https://Xloading-919.github.io/zh/systemctl%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/</link>
      <pubDate>Wed, 15 Oct 2025 16:43:17 +0800</pubDate>
      <guid>https://Xloading-919.github.io/zh/systemctl%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;code&gt;systemctl&lt;/code&gt; 是 &lt;strong&gt;systemd 的核心控制命令&lt;/strong&gt;，用于管理系统服务、单元（unit）、启动目标、设备、挂载点等。&lt;/p&gt;
&lt;h2 id=&#34;-一基本命令分类总览&#34;&gt;🧩 一、基本命令分类总览&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类别&lt;/th&gt;
          &lt;th&gt;常用命令&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;服务管理&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;start&lt;/code&gt; / &lt;code&gt;stop&lt;/code&gt; / &lt;code&gt;restart&lt;/code&gt; / &lt;code&gt;reload&lt;/code&gt; / &lt;code&gt;status&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;控制服务运行状态&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;开机自启&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;enable&lt;/code&gt; / &lt;code&gt;disable&lt;/code&gt; / &lt;code&gt;is-enabled&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;控制是否随系统启动&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;系统状态&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;list-units&lt;/code&gt; / &lt;code&gt;list-unit-files&lt;/code&gt; / &lt;code&gt;is-active&lt;/code&gt; / &lt;code&gt;is-failed&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;查看单元运行状态&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;系统控制&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;reboot&lt;/code&gt; / &lt;code&gt;poweroff&lt;/code&gt; / &lt;code&gt;halt&lt;/code&gt; / &lt;code&gt;suspend&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; / &lt;code&gt;isolate&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;控制系统运行级别&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;配置管理&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;daemon-reload&lt;/code&gt; / &lt;code&gt;edit&lt;/code&gt; / &lt;code&gt;cat&lt;/code&gt; / &lt;code&gt;show&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;刷新或查看 unit 配置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;日志与诊断&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;list-timers&lt;/code&gt; / &lt;code&gt;show&lt;/code&gt; / &lt;code&gt;status&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;查看定时器与服务详情&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-二服务管理类命令最常用&#34;&gt;⚙️ 二、服务管理类命令（最常用）&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;命令&lt;/th&gt;
          &lt;th&gt;示例&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;start&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;systemctl start nginx&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;启动服务&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;stop&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;systemctl stop nginx&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;停止服务&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;restart&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;systemctl restart nginx&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;重启服务&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;reload&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;systemctl reload nginx&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;重新加载配置，不中断服务（支持的服务才行）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;status&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;systemctl status nginx&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;查看服务运行状态&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 提示：&lt;br&gt;
可以加 &lt;code&gt;-l&lt;/code&gt; 显示完整日志，如：&lt;code&gt;systemctl status nginx -l&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>十大排序算法总结</title>
      <link>https://Xloading-919.github.io/zh/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 09 Oct 2025 15:22:50 +0800</pubDate>
      <guid>https://Xloading-919.github.io/zh/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h2 id=&#34;总览&#34;&gt;总览&lt;/h2&gt;
&lt;p&gt;下面是主要排序算法的性能表现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n：表示待排序的数据量&lt;/li&gt;
&lt;li&gt;k：表示桶的个数&lt;/li&gt;
&lt;li&gt;稳定：表示如果$A=B$相同，原本A和B在序列中的顺序不变&lt;/li&gt;
&lt;li&gt;不稳定：表示如果$A=B$相同，原本A和B在序列中的顺序可能会变&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;排序算法&lt;/th&gt;
          &lt;th&gt;时间复杂度（平均）&lt;/th&gt;
          &lt;th&gt;时间复杂度（最差）&lt;/th&gt;
          &lt;th&gt;时间复杂度（最好）&lt;/th&gt;
          &lt;th&gt;空间复杂度&lt;/th&gt;
          &lt;th&gt;排序方式&lt;/th&gt;
          &lt;th&gt;稳定性&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;冒泡排序&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n)$&lt;/td&gt;
          &lt;td&gt;$O(1)$&lt;/td&gt;
          &lt;td&gt;内部排序&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;选择排序&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(1)$&lt;/td&gt;
          &lt;td&gt;内部排序&lt;/td&gt;
          &lt;td&gt;不稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;插入排序&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n)$&lt;/td&gt;
          &lt;td&gt;$O(1)$&lt;/td&gt;
          &lt;td&gt;内部排序&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;希尔排序&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(1)$&lt;/td&gt;
          &lt;td&gt;内部排序&lt;/td&gt;
          &lt;td&gt;不稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;归并排序&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(n)$&lt;/td&gt;
          &lt;td&gt;外部排序&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;快速排序&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(\log n)$&lt;/td&gt;
          &lt;td&gt;内部排序&lt;/td&gt;
          &lt;td&gt;不稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;堆排序&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(n\log n)$&lt;/td&gt;
          &lt;td&gt;$O(1)$&lt;/td&gt;
          &lt;td&gt;内部排序&lt;/td&gt;
          &lt;td&gt;不稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;计数排序&lt;/td&gt;
          &lt;td&gt;$O(n + k)$&lt;/td&gt;
          &lt;td&gt;$O(n + k)$&lt;/td&gt;
          &lt;td&gt;$O(n + k)$&lt;/td&gt;
          &lt;td&gt;$O(k)$&lt;/td&gt;
          &lt;td&gt;外部排序&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;桶排序&lt;/td&gt;
          &lt;td&gt;$O(n + k)$&lt;/td&gt;
          &lt;td&gt;$O(n^2)$&lt;/td&gt;
          &lt;td&gt;$O(n + k)$&lt;/td&gt;
          &lt;td&gt;$O(n + k)$&lt;/td&gt;
          &lt;td&gt;外部排序&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;基数排序&lt;/td&gt;
          &lt;td&gt;$O(n \times k)$&lt;/td&gt;
          &lt;td&gt;$O(n \times k)$&lt;/td&gt;
          &lt;td&gt;$O(n \times k)$&lt;/td&gt;
          &lt;td&gt;$O(n + k)$&lt;/td&gt;
          &lt;td&gt;外部排序&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;分类&#34;&gt;分类&lt;/h2&gt;
&lt;!-- 推荐：如果图片放在 `static/img`，请在内容中使用网站根路径引用，构建后会位于网站根的 `/img/` 下 --&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://Xloading-919.github.io/zh/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/img/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>多线程基础</title>
      <link>https://Xloading-919.github.io/zh/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 03 Oct 2025 15:53:17 +0800</pubDate>
      <guid>https://Xloading-919.github.io/zh/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;h2 id=&#34;为什么要多线程&#34;&gt;为什么要多线程&lt;/h2&gt;
&lt;p&gt;多线程可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;充分利用多核CPU的处理能力，可以让程序并行执行，提高吞吐量。&lt;/li&gt;
&lt;li&gt;提升资源的利用率，一个线程在等待IO的时候，CPU可以调度其他线程继续工作。&lt;/li&gt;
&lt;li&gt;提升程序的相应速度，可以把耗时的IO操作放到后台线程处理，主线程继续响应用户。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;并行与并发&#34;&gt;并行与并发&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;并行，是多核CPU上的多任务处理，是同一时间同时执行&lt;/li&gt;
&lt;li&gt;并发，是单核CPU上的多任务处理，是同一个时间段内交替执行，其实是通过时间片轮转实现&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;互斥与同步&#34;&gt;互斥与同步&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;互斥是线程间要抢占资源，就是说保证一个线程在临界区执行时，其他线程应该被阻止进入临界区&lt;/li&gt;
&lt;li&gt;同步是线程之间需要进行合作，并发的线程在一些任务上需要相互等待与互通消息，按照一定顺序执行&lt;/li&gt;
&lt;li&gt;通过锁或者信号量机制实现。
&lt;ol&gt;
&lt;li&gt;信号量：
&lt;ol&gt;
&lt;li&gt;p操作：进入临界区前，将资源数量减1，可能阻塞&lt;/li&gt;
&lt;li&gt;v操作：离开临界区后，将资源数量加1，不会阻塞&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;进程线程协程&#34;&gt;进程、线程、协程&lt;/h2&gt;
&lt;p&gt;这是三种并发执行单元：&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于</title>
      <link>https://Xloading-919.github.io/zh/about/</link>
      <pubDate>Tue, 16 Sep 2025 16:45:38 +0800</pubDate>
      <guid>https://Xloading-919.github.io/zh/about/</guid>
      <description>&lt;!-- more --&gt;
&lt;p&gt;这里尝试写一个博客&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
